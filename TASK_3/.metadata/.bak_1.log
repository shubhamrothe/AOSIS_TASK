!SESSION 2024-02-21 23:23:35.518 -----------------------------------------------
eclipse.buildId=4.18.1.202305021758
java.version=17.0.7
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

This is a continuation of log file D:\AOSIS_InfoByte_Internship\TASK_3\.metadata\.bak_0.log
Created Time: 2024-02-22 11:05:01.702

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:01.703
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:01.703
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:07.391
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println(" Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:05:07.393
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:05:07.393
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:07.733
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println(" Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:07.734
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:07.735
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:08.531
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:05:08.531
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:05:08.531
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:08.636
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:08.636
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:08.637
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:12.158
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:12.159
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:12.159
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:12.402
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:12.403
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:12.404
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:13.207
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println(" Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:05:13.208
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:05:13.208
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:13.411
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println(" Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:13.412
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:13.413
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:15.227
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:05:15.229
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:05:15.229
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:15.561
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:15.564
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:15.566
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:17.687
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:17.688
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:17.689
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:18.962
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:18.963
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:18.964
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:18.979
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:18.980
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:18.981
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:18.996
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2024-02-22 11:05:18.997
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:20.690
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:20.691
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:20.692
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:20.703
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:20.703
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:20.704
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:20.714
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2024-02-22 11:05:20.716
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:22.014
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:22.015
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:22.016
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:24.754
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:24.755
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:24.756
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:25.641
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:05:25.642
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:05:25.643
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:25.665
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:25.666
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:25.667
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:29.204
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:29.205
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:29.206
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:25.057
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:25.059
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:25.059
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:25.071
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2024-02-22 11:06:25.071
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:28.823
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:28.824
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:28.824
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:63)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:28.836
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:28.837
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:28.838
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:28.849
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface.text 4 0 2024-02-22 11:06:28.850
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1052)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:111)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:33.300
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:33.301
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:33.301
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:38.257
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:38.258
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:38.258
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:42.114
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:06:42.114
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:06:42.115
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:42.394
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            	
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:06:42.395
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:06:42.395
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:42.413
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            	
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:42.414
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:42.415
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:45.680
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:06:45.681
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:06:45.682
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:45.702
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:45.703
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:45.704
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:48.166
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:48.167
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:48.168
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:50.020
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:50.021
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:50.022
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:50.249
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:50.251
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:50.252
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:51.321
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:51.322
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:51.323
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:51.508
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:51.509
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:51.509
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:52.658
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:52.659
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:52.659
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:52.878
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            	if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:06:52.878
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:06:52.879
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:52.896
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            	if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:52.897
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:52.899
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:55.973
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:06:55.974
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:06:55.974
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:56.166
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:06:56.167
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:06:56.167
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:56.186
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:56.187
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:56.187
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:56.866
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:56.866
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:56.867
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:57.867
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:06:57.867
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:06:57.868
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:58.185
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:58.186
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:58.186
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:06:59.527
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:06:59.528
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:06:59.529
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:00.265
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:07:00.266
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:07:00.266
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:05.318
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:07:05.320
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:07:05.320
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:05.497
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:07:05.498
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:07:05.499
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:08.660
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:07:08.661
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:07:08.661
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:08.885
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:07:08.886
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:07:08.887
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:12.355
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:07:12.356
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:07:12.357
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:12.598
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:07:12.598
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:07:12.599
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:18.608
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:07:18.609
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:07:18.610
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:18.795
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + 
            		if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:07:18.796
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:07:18.796
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:18.815
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + 
            		if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:07:18.816
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:07:18.817
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:20.703
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + 
            		if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:07:20.704
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:07:20.705
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:39.531
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + 
            		if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:07:39.533
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:07:39.533
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:07:40.436
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + 
            		if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:07:40.436
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:07:40.438
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:09:47.670
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + 
            		if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:09:47.671
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:09:47.671
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:09:51.826
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() + 
            		if(Type=="deposit"){
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );}
            		else {
            			System.out.println("from Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
