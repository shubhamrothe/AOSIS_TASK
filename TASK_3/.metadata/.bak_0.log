!SESSION 2024-02-18 13:11:10.428 -----------------------------------------------
eclipse.buildId=4.18.1.202305021758
java.version=17.0.7
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

!ENTRY ch.qos.logback.classic 1 0 2024-02-18 13:11:12.768
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-02-18 13:13:20.482
!MESSAGE Logback config file: D:\AOSIS_InfoByte_Internship\TASK_3\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2024-02-18 13:13:34.865
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2024-02-18 13:13:34.865
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2024-02-18 13:13:56.317
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Shubham'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-18 13:22:06.156
!MESSAGE Classpath changed for project: ATM_Interface_Application

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-18 13:22:11.435
!MESSAGE Classpath changed for project: ATM_Interface_Application

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-18 13:22:11.541
!MESSAGE Boot project ADDED: ATM_Interface_Application

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-18 13:22:11.541
!MESSAGE Starting Boot LS...

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-18 13:22:11.619
!MESSAGE Started Boot LS process

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-18 13:22:11.657
!MESSAGE DelegatingStreamConnectionProvider - Starting Boot LS

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2024-02-18 13:22:11.662
!MESSAGE Started org.springframework.tooling.boot.ls LS process 352

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-18 13:22:14.721
!MESSAGE Classpath changed for project: ATM_Interface_Application

!ENTRY org.eclipse.lsp4e 2 0 2024-02-18 13:40:50.675
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2024-02-18 13:41:25.341
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jface 2 0 2024-02-18 14:10:52.061
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2024-02-18 14:10:52.061
!MESSAGE A conflict occurred for CTRL+SHIFT+C:
Binding(CTRL+SHIFT+C,
	ParameterizedCommand(Command(org.eclipse.tm4e.languageconfiguration.toggleLineCommentCommand,Toggle Line Comment,
		,
		Category(org.eclipse.tm4e.languageconfiguration.category,TM4E Language Configuration,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.tm4e.languageconfiguration.toggleLineCommentCommand"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.textEditorScope,,,system)
Binding(CTRL+SHIFT+C,
	ParameterizedCommand(Command(org.springframework.tooling.boot.ls.ToggleComment,Toggle Comment,
		,
		Category(org.springframework.ide.eclipse.commands,Spring Generic Text Editor,Spring Language Server Commands,true),
		WorkbenchHandlerServiceHandler("org.springframework.tooling.boot.ls.ToggleComment"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.textEditorScope,,,system)

!ENTRY org.eclipse.ui 2 0 2024-02-18 16:13:01.926
!MESSAGE Save Failed
!STACK 0
java.lang.IllegalArgumentException: Illegal value: -1
	at org.eclipse.core.internal.resources.Resource.revertModificationStamp(Resource.java:1596)
	at org.eclipse.core.internal.filebuffers.ResourceTextFileBuffer.commitFileBufferContent(ResourceTextFileBuffer.java:362)
	at org.eclipse.core.internal.filebuffers.ResourceFileBuffer.commit(ResourceFileBuffer.java:317)
	at org.eclipse.jdt.internal.ui.javaeditor.DocumentAdapter.save(DocumentAdapter.java:516)
	at org.eclipse.jdt.internal.core.CommitWorkingCopyOperation.executeOperation(CommitWorkingCopyOperation.java:127)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2380)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:811)
	at org.eclipse.jdt.internal.core.CompilationUnit.commitWorkingCopy(CompilationUnit.java:405)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.commitWorkingCopy(CompilationUnitDocumentProvider.java:1418)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider$3.execute(CompilationUnitDocumentProvider.java:1495)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider$DocumentProviderOperation.run(TextFileDocumentProvider.java:133)
	at org.eclipse.ui.actions.WorkspaceModifyDelegatingOperation.execute(WorkspaceModifyDelegatingOperation.java:71)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.lambda$0(WorkspaceModifyOperation.java:110)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2380)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor96.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui 2 0 2024-02-18 16:15:24.223
!MESSAGE Save Failed
!STACK 0
java.lang.IllegalArgumentException: Illegal value: -1
	at org.eclipse.core.internal.resources.Resource.revertModificationStamp(Resource.java:1596)
	at org.eclipse.core.internal.filebuffers.ResourceTextFileBuffer.commitFileBufferContent(ResourceTextFileBuffer.java:362)
	at org.eclipse.core.internal.filebuffers.ResourceFileBuffer.commit(ResourceFileBuffer.java:317)
	at org.eclipse.jdt.internal.ui.javaeditor.DocumentAdapter.save(DocumentAdapter.java:516)
	at org.eclipse.jdt.internal.core.CommitWorkingCopyOperation.executeOperation(CommitWorkingCopyOperation.java:127)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2380)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:811)
	at org.eclipse.jdt.internal.core.CompilationUnit.commitWorkingCopy(CompilationUnit.java:405)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider.commitWorkingCopy(CompilationUnitDocumentProvider.java:1418)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitDocumentProvider$3.execute(CompilationUnitDocumentProvider.java:1495)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider$DocumentProviderOperation.run(TextFileDocumentProvider.java:133)
	at org.eclipse.ui.actions.WorkspaceModifyDelegatingOperation.execute(WorkspaceModifyDelegatingOperation.java:71)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.lambda$0(WorkspaceModifyOperation.java:110)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2380)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2405)
	at org.eclipse.ui.actions.WorkspaceModifyOperation.run(WorkspaceModifyOperation.java:131)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:76)
	at org.eclipse.ui.internal.editors.text.WorkspaceOperationRunner.run(WorkspaceOperationRunner.java:66)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.executeOperation(TextFileDocumentProvider.java:461)
	at org.eclipse.ui.editors.text.TextFileDocumentProvider.saveDocument(TextFileDocumentProvider.java:764)
	at org.eclipse.ui.texteditor.AbstractTextEditor.performSave(AbstractTextEditor.java:5009)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.performSave(CompilationUnitEditor.java:1263)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor.doSave(CompilationUnitEditor.java:1317)
	at org.eclipse.ui.texteditor.AbstractTextEditor$TextEditorSavable.doSave(AbstractTextEditor.java:7185)
	at org.eclipse.ui.Saveable.doSave(Saveable.java:213)
	at org.eclipse.ui.internal.SaveableHelper.doSaveModel(SaveableHelper.java:333)
	at org.eclipse.ui.internal.SaveableHelper.lambda$1(SaveableHelper.java:196)
	at org.eclipse.ui.internal.SaveableHelper.lambda$3(SaveableHelper.java:271)
	at org.eclipse.jface.operation.ModalContext.runInCurrentThread(ModalContext.java:434)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:352)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2346)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2344)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:278)
	at org.eclipse.ui.internal.SaveableHelper.runProgressMonitorOperation(SaveableHelper.java:260)
	at org.eclipse.ui.internal.SaveableHelper.saveModels(SaveableHelper.java:207)
	at org.eclipse.ui.internal.SaveableHelper.savePart(SaveableHelper.java:150)
	at org.eclipse.ui.internal.WorkbenchPage.saveSaveable(WorkbenchPage.java:3802)
	at org.eclipse.ui.internal.WorkbenchPage.saveEditor(WorkbenchPage.java:3815)
	at org.eclipse.ui.internal.handlers.SaveHandler.execute(SaveHandler.java:82)
	at org.eclipse.ui.internal.handlers.HandlerProxy.execute(HandlerProxy.java:283)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor96.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SESSION 2024-02-21 23:23:35.518 -----------------------------------------------
eclipse.buildId=4.18.1.202305021758
java.version=17.0.7
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

!ENTRY ch.qos.logback.classic 1 0 2024-02-21 23:23:37.963
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-02-21 23:23:52.728
!MESSAGE Logback config file: D:\AOSIS_InfoByte_Internship\TASK_3\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.100.20230106-1511.xml

!ENTRY org.eclipse.jface 2 0 2024-02-21 23:24:11.398
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2024-02-21 23:24:11.398
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-21 23:24:28.107
!MESSAGE DelegatingStreamConnectionProvider - Starting Boot LS

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2024-02-21 23:24:28.444
!MESSAGE Started org.springframework.tooling.boot.ls LS process 9740

!ENTRY org.eclipse.egit.ui 2 0 2024-02-21 23:24:40.017
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Shubham'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-21 23:24:40.676
!MESSAGE Boot project ADDED: ATM_Interface_Application

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-21 23:24:40.677
!MESSAGE Starting Boot LS...

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-21 23:24:40.678
!MESSAGE Started Boot LS process

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2024-02-21 23:25:23.246
!MESSAGE executing callback sts4.classpath.OxwlUUMX FAILED

!ENTRY org.springframework.tooling.ls.eclipse.commons 4 0 2024-02-21 23:25:23.247
!MESSAGE TimeoutException
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.springframework.tooling.ls.eclipse.commons.LSP4ECommandExecutor.executeClientCommand(LSP4ECommandExecutor.java:37)
	at org.springframework.tooling.jdt.ls.commons.classpath.SendClasspathNotificationsJob.flush(SendClasspathNotificationsJob.java:178)
	at org.springframework.tooling.jdt.ls.commons.classpath.SendClasspathNotificationsJob.run(SendClasspathNotificationsJob.java:149)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jface 2 0 2024-02-21 23:29:40.123
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2024-02-21 23:29:40.123
!MESSAGE A conflict occurred for CTRL+SHIFT+C:
Binding(CTRL+SHIFT+C,
	ParameterizedCommand(Command(org.eclipse.tm4e.languageconfiguration.toggleLineCommentCommand,Toggle Line Comment,
		,
		Category(org.eclipse.tm4e.languageconfiguration.category,TM4E Language Configuration,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.tm4e.languageconfiguration.toggleLineCommentCommand"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.textEditorScope,,,system)
Binding(CTRL+SHIFT+C,
	ParameterizedCommand(Command(org.springframework.tooling.boot.ls.ToggleComment,Toggle Comment,
		,
		Category(org.springframework.ide.eclipse.commands,Spring Generic Text Editor,Spring Language Server Commands,true),
		WorkbenchHandlerServiceHandler("org.springframework.tooling.boot.ls.ToggleComment"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.textEditorScope,,,system)

!ENTRY org.eclipse.lsp4e 2 0 2024-02-22 00:00:57.975
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:386)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:65)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 4 0 2024-02-22 10:22:55.065
!MESSAGE org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.io.IOException: The pipe is being closed
!STACK 0
java.util.concurrent.ExecutionException: org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.io.IOException: The pipe is being closed
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:396)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.LanguageServerWrapper.lambda$10(LanguageServerWrapper.java:446)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1804)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1796)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)
Caused by: org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.io.IOException: The pipe is being closed
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at org.eclipse.lsp4e.LanguageServerWrapper.lambda$3(LanguageServerWrapper.java:282)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.request(RemoteEndpoint.java:161)
	at org.eclipse.lsp4j.jsonrpc.services.EndpointProxy.invoke(EndpointProxy.java:91)
	at jdk.proxy11/jdk.proxy11.$Proxy34.shutdown(Unknown Source)
	at org.eclipse.lsp4e.LanguageServerWrapper.lambda$10(LanguageServerWrapper.java:444)
	... 7 more
Caused by: java.io.IOException: The pipe is being closed
	at java.base/java.io.FileOutputStream.writeBytes(Native Method)
	at java.base/java.io.FileOutputStream.write(FileOutputStream.java:349)
	at java.base/java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:81)
	at java.base/java.io.BufferedOutputStream.flush(BufferedOutputStream.java:142)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:69)
	... 12 more

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-22 10:22:55.177
!MESSAGE DelegatingStreamConnectionProvider - Starting Boot LS

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2024-02-22 10:22:55.465
!MESSAGE Started org.springframework.tooling.boot.ls LS process 21212

!ENTRY org.springframework.tooling.boot.ls 1 0 2024-02-22 10:22:55.874
!MESSAGE DelegatingStreamConnectionProvider - Stopping Boot LS

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2024-02-22 10:22:55.874
!MESSAGE Stopped org.springframework.tooling.boot.ls LS process 9740

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2024-02-22 10:23:09.883
!MESSAGE executing callback sts4.classpath.NLnyxJTM FAILED

!ENTRY org.springframework.tooling.ls.eclipse.commons 4 0 2024-02-22 10:23:09.884
!MESSAGE TimeoutException
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1960)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2095)
	at org.springframework.tooling.ls.eclipse.commons.LSP4ECommandExecutor.executeClientCommand(LSP4ECommandExecutor.java:37)
	at org.springframework.tooling.jdt.ls.commons.classpath.SendClasspathNotificationsJob.flush(SendClasspathNotificationsJob.java:178)
	at org.springframework.tooling.jdt.ls.commons.classpath.SendClasspathNotificationsJob.run(SendClasspathNotificationsJob.java:149)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 10:53:57.525
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 10:53:57.529
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 10:53:57.531
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 10:53:57.687
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 10:53:57.688
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 10:53:57.689
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 10:53:58.707
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 10:53:58.710
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 10:53:58.712
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 10:53:58.872
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 10:53:58.873
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 10:53:58.874
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:02:38.234
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:02:38.236
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:02:38.236
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:02:39.137
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:02:39.138
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:02:39.138
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:13.399
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:03:13.401
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:03:13.402
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:14.495
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:03:14.496
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:03:14.497
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:14.720
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:03:14.721
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:03:14.721
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:30.444
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println();
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:03:30.445
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:03:30.446
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:32.725
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println();
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:03:32.726
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:03:32.727
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:33.967
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("");
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:03:33.968
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:03:33.968
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:42.587
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("");
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:03:42.587
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:03:42.588
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:45.003
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("");
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:03:45.004
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:03:45.005
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:45.689
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("");
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:03:45.691
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:03:45.692
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.lsp4e 4 0 2024-02-22 11:03:45.904
!MESSAGE org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Internal error.
!STACK 0
java.util.concurrent.ExecutionException: org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Internal error.
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:396)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.operations.declaration.OpenDeclarationHyperlinkDetector.detectHyperlinks(OpenDeclarationHyperlinkDetector.java:68)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4256)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3642)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
Caused by: org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Internal error.
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleResponse(RemoteEndpoint.java:209)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:193)
	at org.eclipse.lsp4e.LanguageServerWrapper.lambda$3(LanguageServerWrapper.java:282)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

!ENTRY org.eclipse.lsp4e 4 0 2024-02-22 11:03:45.961
!MESSAGE org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Internal error.
!STACK 0
java.util.concurrent.ExecutionException: org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Internal error.
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:396)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2096)
	at org.eclipse.lsp4e.operations.declaration.OpenDeclarationHyperlinkDetector.detectHyperlinks(OpenDeclarationHyperlinkDetector.java:68)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseDown(HyperlinkManager.java:408)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:196)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4256)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3642)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
Caused by: org.eclipse.lsp4j.jsonrpc.ResponseErrorException: Internal error.
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleResponse(RemoteEndpoint.java:209)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:193)
	at org.eclipse.lsp4e.LanguageServerWrapper.lambda$3(LanguageServerWrapper.java:282)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:48.341
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("");
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:03:48.342
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:03:48.344
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:50.524
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To");
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:03:50.526
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:03:50.527
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:51.163
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To ");
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:03:51.164
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:03:51.165
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:52.412
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id");
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:03:52.413
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:03:52.414
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:54.053
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id");
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:03:54.054
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:03:54.055
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:56.441
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id");
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:03:56.442
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:03:56.442
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:03:58.077
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id");
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:03:58.078
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:03:58.078
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:00.419
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:");
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:00.420
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:00.421
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:03.015
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+);
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:03.017
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:03.017
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:03.860
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:03.862
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:03.862
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:06.032
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Idt:"+ );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:06.033
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:06.034
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:06.054
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Idt:"+ );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:06.054
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:06.055
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:10.359
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Idtransaction.:"+ );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:10.360
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:10.361
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:12.090
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:12.091
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:12.091
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:14.275
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:14.275
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:14.276
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:15.975
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+  );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:15.976
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:15.976
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:18.429
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transac );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:18.429
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:18.430
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:19.667
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:19.667
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:19.667
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:20.419
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction. );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:20.420
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:20.422
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:23.997
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:23.999
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:24.000
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:30.805
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:30.807
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:30.807
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:32.202
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:32.203
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:32.204
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:32.224
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:32.225
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:32.226
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:33.022
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:33.023
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:33.024
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:34.920
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:34.921
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:34.922
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:35.118
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:35.119
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:35.119
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:39.180
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:39.180
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:39.181
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:40.244
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:40.246
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:40.247
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor87.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1286)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1065)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1117)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1113)
	at org.eclipse.swt.widgets.Widget.wmChar(Widget.java:1594)
	at org.eclipse.swt.widgets.Control.WM_CHAR(Control.java:4865)
	at org.eclipse.swt.widgets.Canvas.WM_CHAR(Canvas.java:345)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4743)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5022)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3640)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:43.264
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:43.265
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:43.265
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:44.261
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:44.262
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:44.263
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:44.480
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:44.481
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:44.482
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:45.939
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:45.940
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:45.940
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:46.132
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("T Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:46.133
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:46.133
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:46.153
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("T Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:46.154
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:46.155
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:46.771
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println(" Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:46.772
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:46.772
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:46.965
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println(" Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:46.966
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:46.966
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:49.520
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("Fro Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:49.521
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:49.521
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:49.540
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("Fro Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:49.541
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:49.542
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:50.139
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("From Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:04:50.140
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:04:50.141
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:50.382
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("From Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:50.383
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:50.384
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:53.622
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("From Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:53.624
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:53.624
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:04:54.770
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("From Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:04:54.771
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:04:54.771
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:00.965
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("From Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2024-02-22 11:05:00.969
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2024-02-22 11:05:00.970
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:01.680
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("From Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-02-22 11:05:01.680
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-02-22 11:05:01.681
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-02-22 11:05:01.700
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.example.demo;

import java.util.Map;
import java.util.HashMap;

public class ATMApplication {
	private Map<String, User> users; // Store users
    private User currentUser;
    private InputOutputHelper ioHelper;

    public ATMApplication() {
        // Initialize users
        users = new HashMap<>();
        users.put("user1", new User("user1", "1234")); // Sample user
        ioHelper = new InputOutputHelper();
        
    }

    public void start() {
        // Display login prompt and authenticate user
        login();
        // Once authenticated, display menu options and handle user input
        showMenu();
    }

//    private void login() {
//        ioHelper.displayMessage("Welcome to the ATM!");
//        ioHelper.displayMessage("Please enter your user ID:");
//        String userId = ioHelper.readInput();
//        ioHelper.displayMessage("Please enter your PIN:");
//        String pin = ioHelper.readInput();
//        
//        // Check if user exists and the entered PIN is correct
//        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
//            currentUser = users.get(userId);
//            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
//        } else {
//            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
//            login(); // Recursive call to login again
//        }
//    }
    
  /*  private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase(); // Convert user ID to lowercase
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct
        if (users.containsKey(userId) && users.get(userId).getPin().equals(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }
*/
    
    private void login() {
        ioHelper.displayMessage("Welcome to the ATM!");
        ioHelper.displayMessage("Please enter your user ID:");
        String userId = ioHelper.readInput().toLowerCase();
        ioHelper.displayMessage("Please enter your PIN:");
        String pin = ioHelper.readInput();

        // Check if user exists and the entered PIN is correct (case-insensitive)
        if (users.containsKey(userId) && users.get(userId).getPin().equalsIgnoreCase(pin)) {
            currentUser = users.get(userId);
            ioHelper.displayMessage("Login successful. Welcome, " + userId + "!");
        } else {
            ioHelper.displayMessage("Invalid user ID or PIN. Please try again.");
            login(); // Recursive call to login again
        }
    }


    private void showMenu() {
        boolean running = true;
        while (running) {
            ioHelper.displayMessage("\nPlease select an option:");
            ioHelper.displayMessage("1. Transactions History");
            ioHelper.displayMessage("2. Withdraw");
            ioHelper.displayMessage("3. Deposit");
            ioHelper.displayMessage("4. Transfer");
            ioHelper.displayMessage("5. Quit");
            String choice = ioHelper.readInput();

            switch (choice) {
                case "1":
                    showTransactionHistory();
                    break;
                case "2":
                    withdraw();
                    break;
                case "3":
                    deposit();
                    break;
                case "4":
                    transfer();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    ioHelper.displayMessage("Invalid option. Please try again.");
            }
        }
    }

//    private void showTransactionHistory() {
//        ioHelper.displayMessage("\nTransaction History:");
//        for (Transaction transaction : currentUser.getTransactionHistory()) {
//            ioHelper.displayMessage("Type: " + transaction.getType() +", from Account of user Id:"+transaction.getUserId() + ", Amount: " + transaction.getAmount() + ", Date: " + transaction.getDate());
//        }
//    }
    

    private void withdraw() {
        ioHelper.displayMessage("\nEnter amount to withdraw:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Withdraw", amount));
            ioHelper.displayMessage("Withdrawal of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void deposit() {
        ioHelper.displayMessage("\nEnter amount to deposit:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount > 0) {
            currentUser.addTransaction(new Transaction("Deposit", amount));
            ioHelper.displayMessage("Deposit of $" + amount + " successful.");
        } else {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
        }
    }

    private void transfer() {
        ioHelper.displayMessage("\nEnter recipient's user ID:");
        String recipientId = ioHelper.readInput();
        if (!users.containsKey(recipientId)) {
            ioHelper.displayMessage("Recipient user ID not found.");
            return;
        }
        ioHelper.displayMessage("Enter amount to transfer:");
        double amount = Double.parseDouble(ioHelper.readInput());
        if (amount <= 0) {
            ioHelper.displayMessage("Invalid amount. Please enter a positive number.");
            return;
        }
        if (currentUser == users.get(recipientId)) {
            ioHelper.displayMessage("Cannot transfer to yourself.");
            return;
        }
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        users.get(recipientId).addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        ioHelper.displayMessage("Transfer of $" + amount + " to " + recipientId + " successful.");
    }

    private void showTransactionHistory() {
        ioHelper.displayMessage("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            ioHelper.displayMessage("Type: " + transaction.getType() +
            		
            		//", from Account of user Id:"+transaction.getUserId() + 
            		if(Type=="deposit")
            		{
            			 System.out.println("To Account of user Id:"+ transaction.getUserId() );
            		}
            		else {
            			System.out.println("From Account of user Id:"+ transaction.getUserId() );
            		}
            		
            		", Amount: " + transaction.getAmount() + ", Date: " 
            		+ transaction.getDate());
        }
    }
	

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2168)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3032)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
